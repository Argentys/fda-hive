/*
 *  ::718604!
 * 
 * Copyright(C) November 20, 2014 U.S. Food and Drug Administration
 * Authors: Dr. Vahan Simonyan (1), Dr. Raja Mazumder (2), et al
 * Affiliation: Food and Drug Administration (1), George Washington University (2)
 * 
 * All rights Reserved.
 * 
 * The MIT License (MIT)
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */


/*
 Copyright (c) 2015 Dr. Vahan Simonyan vahansim@gmail.com
 This software is protected by viVI. Unauthorized use, duplication,
 reverse engineering, any form of redistribution, use in part or as
 a whole, other than by prior, express, written and signed agreement
 is subject to penalties in the form of removal from this physical reality.
 If you have received this file in error, or you had a Chimp with infinite time
 at hands to accidentally type this alpha-mememtic sequence on a keyboard,
 or if this file has been generated by quantum fluctuations - please notify
 copyright holder and destroy this and any other copies.
 All rights reserved except the right to be imaginative.
 */


#pragma once
#ifndef sLib_sIonHC_hpp
#define sLib_sIonHC_hpp

#include <ion/sIon-birel.hpp>

namespace slib {

    class sIonHC : public sIonBirel
    {
        public:

            sIO tbuf;

            static const char * typeExpansionIQL;

        public:
            sIonHC(const char * baseName=0, idx lopenMode=0, sIO * out=0, sIO * lerrIO=0):sIonBirel(baseName,lopenMode, out, lerrIO){
                //realTypeAttributeIterator=domainElementIterator;
                objectIteratorCallback=realObjectIteratorCallback;
            }

            //
            // general methods
            //


            //
            // type specific methods
            //
            sVar typeAliasDic;
            idx getInheritedTypes( const char * typenames,  idx lentp, sIO * out );
            void attachTypeIterators( sIO * out=0);
            //idx iterateTypes( const char * typenames);
            /*idx iterateTypes( const char * typenames=0, idx typenameslen=0, const char * ids=0, idx idslen=0){
                return iterateObjects( typenames, typenameslen, ids, idslen, "?type");
            }*/

            //static idx typeAttributeIterator(void * param, sIonBirel::LevelInfo * level, sIonBirel * birel, sIonWander * wander, idx iDomain );
            /*idx accumulateTypeAttributes(sDic <  BirelResult > * attributes, const char * typenm, idx startDepth=1, idx endDepth=2) {
                DomainCollect cache;
                cache.dic=attributes;
                iteratorParam=(void *) &cache;
                addDomainIterator("_field", 0, domainElementIterator, (void*)&cache, startDepth,endDepth);
                if(typenm)iterateTypes(typenm);
                return attributes ? attributes->dim() : 0;
            }*/

            //
            // object specific methods
            //

            callbackIterator objectIteratorCallback;
            void attachObjectListTraverseQuery(sIO * out);
            idx iterateObjects( const char * typenames=0, idx typenameslen=0, const char * ids =0, idx idslen=0, const char* baseline="?obj");
            //idx iterateObjects( const char * typenames=0, idx typenameslen=0, const char * ids =0, idx idslen=0, const char * wanderid=0);
            idx iterateObjectsIQL( const char * typenames=0, idx typenameslen=0, const char * ids =0, idx idslen=0);
            static idx realObjectIteratorCallback(void * param, LevelInfo * level, sIonBirel * birel, sIonWander * wander, idx inorout );



            void attachGroupListListTraverseQuery (sIO * out);
            void attachUserIterators( sIO * out);
            static idx userIteratorCallback(void * param, sIonBirel::LevelInfo * level, sIonBirel * birel, sIonWander * wander, idx inorout );


            idx addRule( const char * act, const char * party, const char * obj, const char * infparty, const char * infobj );

    };

}; // namespace slib

#endif
